{"version":3,"sources":["hooks/useFetch.js","components/Card/Card.js","components/Home/Home.js","components/Navbar/Navbar.js","components/India/India.js","components/Card/CCard.jsx","components/Country/Country.js","App.js","serviceWorker.js","index.js"],"names":["useFetch","url","useState","data","setData","useEffect","a","axios","get","fetchData","Card","title","cls","className","Home","globalData","cases","recovered","deaths","Navbar","class","to","src","width","height","alt","India","indiaData","CCard","country","todayCases","todayDeaths","Country","countryData","map","App","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.703c1be3.chunk.js","sourcesContent":["import { useState, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\nexport const useFetch = url => {\r\n  const [data, setData] = useState(null);\r\n  useEffect(() => {\r\n    const fetchData = async url => {\r\n      const { data } = await axios.get(url);\r\n      setData(data);\r\n    };\r\n    fetchData(url);\r\n  }, [url]);\r\n  return data;\r\n};\r\n","import React from \"react\";\r\nimport \"./card.scss\";\r\nexport const Card = ({ data, title, cls }) => {\r\n  return (\r\n    <div className=\"card-box\">\r\n      <p\r\n        className={\r\n          cls === \"Infected\"\r\n            ? `title red`\r\n            : cls === \"recovered\"\r\n            ? \"title green\"\r\n            : \" title yellow\"\r\n        }\r\n      >\r\n        {title}\r\n      </p>\r\n      <p className=\"status\">{data}</p>\r\n    </div>\r\n  );\r\n};\r\n\r\n","import React from \"react\";\r\nimport \"./home.style.scss\";\r\nimport { useFetch } from \"../../hooks/useFetch\";\r\nimport { Card } from \"../Card/Card\";\r\nexport const Home = () => {\r\n  const url = \"https://corona.lmao.ninja/all\";\r\n  const globalData = useFetch(url);\r\n  return (\r\n    <div>\r\n      <h1 className='title'>World Details</h1>\r\n      <div className=\"cards\">\r\n        <Card\r\n          data={globalData ? globalData.cases : \"Loading..\"}\r\n          title=\"Total Infected\"\r\n          cls=\"Infected\"\r\n        />\r\n        <Card\r\n          data={globalData ? globalData.recovered : \"Loading..\"}\r\n          title=\"Total Recovered\"\r\n          cls=\"recovered\"\r\n        />\r\n        <Card\r\n          data={globalData ? globalData.deaths : \"Loading..\"}\r\n          title=\"Total Deaths\"\r\n          cls=\"death\"\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nexport const Navbar = () => {\r\n  return (\r\n    <div>\r\n      <nav class=\"navbar navbar-dark bg-dark\">\r\n        <Link class=\"navbar-brand\" to=\"/\">\r\n          <img\r\n            src=\"/docs/4.4/assets/brand/bootstrap-solid.svg\"\r\n            width=\"30\"\r\n            height=\"30\"\r\n            class=\"d-inline-block align-top\"\r\n            alt=\"\"\r\n          />\r\n          COVID19 TRACKER\r\n        </Link>\r\n\r\n        <Link to=\"/\" className=\"navItem\">Home</Link>\r\n        <Link to=\"/india\" className=\"navItem\">India</Link>\r\n        <Link to=\"/country\" className=\"navItem\">Country</Link>\r\n      </nav>\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\r\n// import \"./home.style.scss\";\r\nimport { useFetch } from \"../../hooks/useFetch\";\r\nimport { Card } from \"../Card/Card\";\r\nexport const India = () => {\r\n  const url = \"https://corona.lmao.ninja/countries/india\";\r\n  const indiaData = useFetch(url);\r\n  return (\r\n    <div>\r\n      <h1 className=\"title\">India Details</h1>\r\n      <div className=\"cards\">\r\n        <Card\r\n          data={indiaData ? indiaData.cases : \"Loading..\"}\r\n          title=\"Total Infected\"\r\n          cls=\"Infected\"\r\n        />\r\n        <Card\r\n          data={indiaData ? indiaData.recovered : \"Loading..\"}\r\n          title=\"Total Recovered\"\r\n          cls=\"recovered\"\r\n        />\r\n        <Card\r\n          data={indiaData ? indiaData.deaths : \"Loading..\"}\r\n          title=\"Total Deaths\"\r\n          cls=\"death\"\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport \"./ccard.scss\";\r\nexport const CCard = ({ data }) => {\r\n  const { country, cases, todayCases, deaths, todayDeaths, recovered } = data;\r\n  return (\r\n    <div className=\"card\">\r\n      <div className=\"title\">{country}</div>\r\n      <div className=\"infected\">Infected: {cases}</div>\r\n      <div className=\"recovered\">Recovered: {recovered} </div>\r\n      <div className=\"deaths\">Deaths: {deaths} </div>\r\n      <div className=\"todaycases\">Today's Cases: {todayCases} </div>\r\n      <div className=\"todaydeaths\">Today's Death: {todayDeaths} </div>\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\r\n// import \"./home.style.scss\";\r\nimport { useFetch } from \"../../hooks/useFetch\";\r\nimport { CCard } from \"../Card/CCard\";\r\nexport const Country = () => {\r\n  const url = \"https://corona.lmao.ninja/countries\";\r\n  const countryData = useFetch(url);\r\n\r\n  return (\r\n    <div className=\"cards\">\r\n      {countryData\r\n        ? countryData.map(country => <CCard data={country} />)\r\n        : \"Loading..\"}\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport \"./App.css\";\r\nimport { HashRouter as Router, Route, Switch } from \"react-router-dom\";\r\nimport { Home } from \"./components/Home/Home\";\r\nimport { Navbar } from \"./components/Navbar/Navbar\";\r\nimport { India } from \"./components/India/India\";\r\nimport { Country } from \"./components/Country/Country\";\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Router>\r\n        <Navbar />\r\n        <Switch>\r\n          <Route exact path=\"/\" component={Home} />\r\n          <Route exact path=\"/india\" component={India} />\r\n          <Route exact path=\"/country\" component={Country} />\r\n        </Switch>\r\n      </Router>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}